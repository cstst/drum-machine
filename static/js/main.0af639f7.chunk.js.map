{"version":3,"sources":["bankOne.js","components/DrumPad.js","actions/index.js","actions/types.js","components/DrumMachine.js","reducers/index.js","store.js","serviceWorker.js","index.js","App.js"],"names":["bankOne","name","src","keyCode","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$props","padPress","sound","audio","current","paused","play","currentTime","React","createRef","_this2","document","addEventListener","e","_this2$props","pressedKey","_this$props2","id","react_default","a","createElement","className","onClick","ref","Component","connect","input","type","payload","state","currentPad","display","filter","map","board","i","components_DrumPad","key","String","fromCharCode","initialState","acceptedKeyCodes","createStore","arguments","length","undefined","action","some","Boolean","window","location","hostname","match","ReactDOM","render","es","store","components_DrumMachine","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0af639f7.chunk.js","sourcesContent":["export default [\r\n  {\r\n    name: 'Hi-Hat', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/4[kb]cl_hihat.aif.mp3',\r\n    keyCode: 81\r\n  },\r\n  {\r\n    name: 'Open Hi-Hat', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/51[kb]open_hh.aif.mp3',\r\n    keyCode: 87\r\n  }, \r\n  {\r\n    name: 'Clap', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/31[kb]handclap.aif.mp3',\r\n    keyCode: 69\r\n  }, \r\n  {\r\n    name: 'Kick', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/60[kb]kick1.aif.mp3',\r\n    keyCode: 65\r\n  },  \r\n  {\r\n    name: 'Snare', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/8[kb]snare.aif.mp3',\r\n    keyCode: 83\r\n  }, \r\n  {\r\n    name: 'Conga', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/15[kb]hi_conga.aif.mp3',\r\n    keyCode: 68\r\n  },\r\n  {\r\n    name: 'Rimshot', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/1[kb]rimshot.aif.mp3',\r\n    keyCode: 90\r\n  },\r\n  {\r\n    name: 'Maracas', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/2[kb]maracas.aif.mp3',\r\n    keyCode: 88\r\n  },\r\n  {\r\n    name: 'Cow Bell', \r\n    src: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/standard%20808%20drumkit/29[kb]cowbell.aif.mp3',\r\n    keyCode: 67\r\n  }\r\n]","\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { padPress } from '../actions';\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.audio = React.createRef();\r\n  }\r\n\r\n  componentWillMount() {\r\n    document.addEventListener('keydown', e => {\r\n      const { keyCode, padPress } = this.props,\r\n            pressedKey = e.keyCode;\r\n      if (keyCode === pressedKey) {\r\n        padPress(pressedKey);\r\n        this.handleClick();\r\n      }\r\n    })\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { keyCode, padPress } = this.props,\r\n          sound = this.audio.current;\r\n    padPress(keyCode);\r\n    if (sound.paused) {\r\n      sound.play();\r\n    } else{\r\n      sound.currentTime = 0\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { src, name, id } = this.props;\r\n    return (\r\n      <button \r\n        className=\"drum-pad\"\r\n        id={id}\r\n        onClick={this.handleClick}\r\n      >\r\n        <audio \r\n          id={name}\r\n          className=\"clip\"\r\n          ref={this.audio}\r\n          src={src}\r\n        />\r\n        {name}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default connect(null, { padPress })(DrumPad)","import { PAD_PRESS } from './types';\r\n\r\nexport const padPress = input => {\r\n  return {\r\n    type: PAD_PRESS,\r\n    payload: input\r\n  }\r\n}","export const PAD_PRESS = 'PAD_PRESS';","import React from 'react';\r\nimport bankOne from '../bankOne';\r\nimport DrumPad from './DrumPad';\r\nimport { connect } from 'react-redux';\r\n\r\nconst DrumMachine = props => {\r\n  const { currentPad } = props;\r\n  const display = bankOne.filter(sound => sound.keyCode === currentPad).map(sound => sound.name);\r\n  const board = bankOne.map((sound, i) => {\r\n    const { name, src, keyCode } = sound;\r\n    return (\r\n      <DrumPad \r\n        key={i} \r\n        id={name}\r\n        name={String.fromCharCode(keyCode)} \r\n        src={src} \r\n        keyCode={keyCode} \r\n      />\r\n    )\r\n  });\r\n  return (\r\n    <div id=\"drum-machine\">\r\n      <div id=\"pad-board\">\r\n        {board}\r\n      </div>\r\n      <div id=\"display\">\r\n        <h1>{display}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ currentPad: state.currentPad }) \r\n\r\nexport default connect(mapStateToProps)(DrumMachine)","import { PAD_PRESS } from '../actions/types';\r\n\r\nconst initialState = {\r\n  currentPad: null\r\n}\r\n\r\nconst acceptedKeyCodes = [65, 67, 68, 69, 81, 83, 87, 88, 90];\r\n\r\nexport default (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case PAD_PRESS:\r\n      if (acceptedKeyCodes.some(keyCode => keyCode === action.payload)) {\r\n        return {\r\n          currentPad: action.payload\r\n        }\r\n      } else {\r\n        return initialState;\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\nimport DrumMachine from './components/DrumMachine';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nexport default () => (\n  <Provider store={store}>\n    <DrumMachine />\n  </Provider>\n);\n\n"],"sourceRoot":""}